day-05
1.aiohttp相对比较底层，编写一个URL的处理函数需要这么几步：

1.1
编写一个用@asyncio.coroutine装饰的函数：
@asyncio.coroutine
def handle_url_xxx(request):
    pass

1.2
传入的参数需要自己从request中获取：
url_param = request.match_info['key']
query_params = parse_qs(request.query_string)

1.3
需要自己构造Response对象：
text = render('template', data)
return web.Response(text.encode('utf-8'))

2.这些重复的工作可以由框架完成。

@get('/blog/{id}')
def get_blog(id):
    pass

@get('/api/comments')
def api_comments(*, page='1'):
    pass

对于函数的返回值，不一定是web.Response对象，可以是str、bytes或dict。

如果希望渲染模板，我们可以这么返回一个dict：

return {
    '__template__': 'index.html',
    'data': '...'
}

因此，Web框架的设计是完全从使用者出发，目的是让使用者编写尽可能少的代码。

编写简单的函数而非引入request和web.Response还有一个额外的好处，就是可以单独测试，否则，需要模拟一个request才能测试。













